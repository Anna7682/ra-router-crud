{"version":3,"sources":["utils/createReq.js","components/CreatePostHeader.js","components/Loading.js","components/Posts/Post/Post.js","components/Posts/Posts.js","components/PostCreator.js","components/PostContext.js","components/PostViewer.js","components/PostEditor.js","App.js","reportWebVitals.js","index.js"],"names":["createReq","_x","_createReq","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","query","method","content","id","baseURL","requestURL","request","response","wrap","_context","prev","next","concat","fetch","headers","Headers","body","JSON","stringify","sent","ok","Error","status","json","t0","abrupt","stop","CreatePostHeader","basURL","_jsx","className","children","Link","to","Button","variant","color","Loading","ThreeDots","Post","item","onPostClickHandler","history","useHistory","created","_jsxs","style","cursor","onClick","moment","fromNow","Posts","props","posts","map","PostCreator","onNewPostSubmitHandler","_useState","useState","_useState2","_slicedToArray","post","setPost","CloseIcon","noValidate","autoComplete","onSubmit","event","TextField","value","onInput","e","target","label","width","type","PostContext","React","createContext","PostViewer","match","onDeleteHandler","params","Consumer","_posts$find","find","i","_Fragment","PostEditor","onSaveHandler","defaultValue","App","setPosts","_useState3","_useState4","loading","setLoading","getPosts","then","data","push","_ref2","preventDefault","_ref3","_ref4","useEffect","Router","Provider","Switch","length","Route","path","exact","render","_objectSpread","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.567ae063.chunk.js","sourcesContent":["export default async function createReq({ query, method, content, id }) {\n  const baseURL = 'https://vpanov-ra-router-crud-backend.herokuapp.com/';\n  // const baseURL = 'http://localhost:7777/';\n  const requestURL =\n    method === 'DELETE' ? baseURL + query + `${id}` : baseURL + query;\n\n  const request = await fetch(requestURL, {\n    method: method,\n    headers: new Headers({ 'content-type': 'application/json' }),\n    body: content ? JSON.stringify({ id, content }) : null,\n  });\n  if (!request.ok) {\n    throw new Error('Request error');\n  }\n  const response = request.status === 200 ? await request.json() : null;\n  return response;\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nexport default function CreatePostHeader({ basURL }) {\n  return (\n    <div className='card'>\n      <div className='btn-holder'>\n        <Link to={basURL + '/posts/new'}>\n          <Button variant='contained' color='primary'>\n            Создать пост\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { ThreeDots } from 'svg-loaders-react';\n\nexport default function Loading() {\n  return (\n    <div>\n      <ThreeDots />\n    </div>\n  );\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport moment from 'moment';\nimport 'moment/locale/ru';\n\nexport default function Post({ item, onPostClickHandler }) {\n  let history = useHistory();\n  const { id, content, created } = item;\n  return (\n    <div\n      className='card'\n      style={{ cursor: 'pointer' }}\n      onClick={() => onPostClickHandler({ id, history })}\n    >\n      <span className='card_time'>{moment(created).fromNow()}</span>\n      <span className='card_content'>{content}</span>\n    </div>\n  );\n}\n","import React from 'react';\nimport Post from './Post/Post';\n\nexport default function Posts(props) {\n  const { posts, onPostClickHandler } = props;\n  return (\n    <ul className=''>\n      {posts.map((item) => (\n        <Post\n          key={item.id}\n          item={item}\n          onPostClickHandler={onPostClickHandler}\n        />\n      ))}\n    </ul>\n  );\n}\n","import React, { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Button, TextField } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\n\nexport default function PostCreator({ onNewPostSubmitHandler, basURL }) {\n  const [post, setPost] = useState('');\n  let history = useHistory();\n  return (\n    <div className='card'>\n      <div className='head-holder'>\n        <Link to={basURL + '/'}>\n          <CloseIcon style={{ cursor: 'pointer' }} />\n        </Link>\n      </div>\n      <form\n        className={'new-post-input'}\n        noValidate\n        autoComplete='off'\n        onSubmit={(event) => {\n          onNewPostSubmitHandler({ event, post, history });\n          setPost('');\n        }}\n      >\n        <TextField\n          value={post}\n          onInput={(e) => setPost(e.target.value)}\n          id='outlined-basic'\n          label='Новая публикация'\n          variant='outlined'\n          style={{ width: '100%' }}\n        />\n        <div className='btn-holder'>\n          <Button variant='contained' color='primary' type='submit'>\n            Опубликовать\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","import React from 'react';\nconst PostContext = React.createContext([]);\n\nexport default PostContext;\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport PostContext from './PostContext';\nimport moment from 'moment';\nimport 'moment/locale/ru';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Button } from '@material-ui/core';\n\nexport default function PostViewer({ match, onDeleteHandler, basURL }) {\n  let history = useHistory();\n  const id = match.params.id;\n  return (\n    <div className='card'>\n      <div className='head-holder'>\n        <Link to={basURL + '/'}>\n          <CloseIcon style={{ cursor: 'pointer' }} />\n        </Link>\n      </div>\n      <PostContext.Consumer>\n        {(posts) => {\n          const { created, content } = posts.find((i) => i.id === id);\n          return (\n            <>\n              <span className='card_time'>{moment(created).fromNow()}</span>\n              <span className='card_content'>{content}</span>\n            </>\n          );\n        }}\n      </PostContext.Consumer>\n      <div className='btn-holder'>\n        <Link to={basURL + `/posts/edit/${id}`}>\n          <Button variant='contained' color='primary'>\n            Изменить\n          </Button>\n        </Link>\n        &nbsp;\n        <Button\n          variant='contained'\n          color='secondary'\n          onClick={() => onDeleteHandler({ id, history })}\n        >\n          Удалить\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport PostContext from './PostContext';\nimport moment from 'moment';\nimport 'moment/locale/ru';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Button, TextField } from '@material-ui/core';\n\nexport default function PostEditor({ match, onSaveHandler, basURL }) {\n  const [post, setPost] = useState('');\n  let history = useHistory();\n  const id = match.params.id;\n  return (\n    <div className='card'>\n      <div className='head-holder'>\n        <span className='post-editor_header'>Редактировать публикацию</span>\n        <Link to={basURL + '/'}>\n          <CloseIcon style={{ cursor: 'pointer' }} />\n        </Link>\n      </div>\n\n      <PostContext.Consumer>\n        {(posts) => {\n          const { created, content } = posts.find((i) => i.id === id);\n          return (\n            <>\n              <span className='card_time'>{moment(created).fromNow()}</span>\n\n              <form\n                className={'new-post-input'}\n                noValidate\n                autoComplete='off'\n                onSubmit={(event) => {\n                  onSaveHandler({ event, id, post, history });\n                  setPost('');\n                }}\n              >\n                <TextField\n                  defaultValue={content}\n                  onInput={(e) => setPost(e.target.value)}\n                  id='outlined-basic'\n                  label=''\n                  variant='outlined'\n                  style={{ width: '100%' }}\n                />\n                <div className='btn-holder'>\n                  <Button variant='contained' color='primary' type='submit'>\n                    Сохранить\n                  </Button>\n                </div>\n              </form>\n            </>\n          );\n        }}\n      </PostContext.Consumer>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport createReq from './utils/createReq';\nimport CreatePostHeader from './components/CreatePostHeader';\nimport Loading from './components/Loading';\nimport Posts from './components/Posts/Posts';\nimport PostCreator from './components/PostCreator';\nimport PostViewer from './components/PostViewer';\nimport PostContext from './components/PostContext';\nimport PostEditor from './components/PostEditor';\n\nexport default function App() {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const basURL = '/ra-router-crud';\n\n  const getPosts = () => {\n    setLoading(true);\n    createReq({\n      query: 'posts',\n      method: 'GET',\n    }).then((data) => {\n      setPosts(data);\n      setLoading(false);\n    }); // знаю, как реализовать подгрузку только новых сообщений, но в условии этого нет, пока пропустим\n  };\n\n  const onPostClickHandler = ({ id, history }) => {\n    history.push(basURL + `/posts/${id}`);\n  };\n\n  const onNewPostSubmitHandler = ({ event, post, history }) => {\n    event.preventDefault();\n    if (post) {\n      createReq({\n        query: 'posts',\n        method: 'POST',\n        content: post,\n      });\n    }\n    history.push(basURL + '/');\n    getPosts();\n  };\n\n  const onDeleteHandler = ({ id, history }) => {\n    if (id) {\n      createReq({\n        query: 'posts/',\n        method: 'DELETE',\n        id,\n      });\n    }\n    history.push(basURL + '/');\n    getPosts();\n  };\n\n  const onSaveHandler = ({ event, id, post, history }) => {\n    event.preventDefault();\n    if (post) {\n      createReq({\n        query: 'posts',\n        method: 'POST',\n        content: post,\n        id: id,\n      });\n    }\n    history.push(basURL + '/');\n    getPosts();\n  };\n\n  useEffect(() => {\n    getPosts();\n  }, []);\n\n  return (\n    <Router>\n      <PostContext.Provider value={posts}>\n        <div className='wrapper>'>\n          <div className='container'>\n            <CreatePostHeader basURL={basURL} />\n            {loading && <Loading />}\n\n            <Switch>\n              {posts.length && (\n                <Route\n                  path={basURL + '/'}\n                  exact\n                  render={(props) => (\n                    <Posts\n                      {...props}\n                      posts={posts}\n                      onPostClickHandler={onPostClickHandler}\n                    />\n                  )}\n                />\n              )}\n              <Route\n                path={basURL + '/posts/new'}\n                exact\n                render={(props) => (\n                  <PostCreator\n                    {...props}\n                    onNewPostSubmitHandler={onNewPostSubmitHandler}\n                    basURL={basURL}\n                  />\n                )}\n              />\n\n              <Route\n                path={basURL + '/posts/:id'}\n                exact\n                render={(props) => (\n                  <PostViewer\n                    {...props}\n                    onDeleteHandler={onDeleteHandler}\n                    basURL={basURL}\n                  />\n                )}\n              />\n\n              <Route\n                path={basURL + '/posts/edit/:id'}\n                exact\n                render={(props) => (\n                  <PostEditor\n                    {...props}\n                    onSaveHandler={onSaveHandler}\n                    basURL={basURL}\n                  />\n                )}\n              />\n            </Switch>\n          </div>\n        </div>\n      </PostContext.Provider>\n    </Router>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}